=begin
#Visual Crossing Weather API

#Weather Forecast and Historical Weather Data via RESTful API.

The version of the OpenAPI document: 4.6
Contact: info@visualcrossing.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module VisualCrossing
  class HistoricalWeatherApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves hourly or daily historical weather records.
    # The weather history data is suitable for retrieving hourly or daily historical weather records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_distance 
    # @option opts [Boolean] :short_column_names 
    # @option opts [String] :end_date_time 
    # @option opts [String] :aggregate_hours 
    # @option opts [Boolean] :collect_station_contributions 
    # @option opts [String] :start_date_time 
    # @option opts [String] :max_stations 
    # @option opts [Boolean] :allow_asynch 
    # @option opts [String] :locations 
    # @option opts [Boolean] :include_normals 
    # @option opts [String] :content_type 
    # @option opts [String] :unit_group 
    # @option opts [String] :key 
    # @return [nil]
    def visual_crossing_web_services_rest_services_weatherdata_history_get(opts = {})
      visual_crossing_web_services_rest_services_weatherdata_history_get_with_http_info(opts)
    end

    # Retrieves hourly or daily historical weather records.
    # The weather history data is suitable for retrieving hourly or daily historical weather records.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_distance 
    # @option opts [Boolean] :short_column_names 
    # @option opts [String] :end_date_time 
    # @option opts [String] :aggregate_hours 
    # @option opts [Boolean] :collect_station_contributions 
    # @option opts [String] :start_date_time 
    # @option opts [String] :max_stations 
    # @option opts [Boolean] :allow_asynch 
    # @option opts [String] :locations 
    # @option opts [Boolean] :include_normals 
    # @option opts [String] :content_type 
    # @option opts [String] :unit_group 
    # @option opts [String] :key 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def visual_crossing_web_services_rest_services_weatherdata_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HistoricalWeatherApi.visual_crossing_web_services_rest_services_weatherdata_history_get ...'
      end
      # resource path
      local_var_path = '/VisualCrossingWebServices/rest/services/weatherdata/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'maxDistance'] = opts[:'max_distance'] if !opts[:'max_distance'].nil?
      query_params[:'shortColumnNames'] = opts[:'short_column_names'] if !opts[:'short_column_names'].nil?
      query_params[:'endDateTime'] = opts[:'end_date_time'] if !opts[:'end_date_time'].nil?
      query_params[:'aggregateHours'] = opts[:'aggregate_hours'] if !opts[:'aggregate_hours'].nil?
      query_params[:'collectStationContributions'] = opts[:'collect_station_contributions'] if !opts[:'collect_station_contributions'].nil?
      query_params[:'startDateTime'] = opts[:'start_date_time'] if !opts[:'start_date_time'].nil?
      query_params[:'maxStations'] = opts[:'max_stations'] if !opts[:'max_stations'].nil?
      query_params[:'allowAsynch'] = opts[:'allow_asynch'] if !opts[:'allow_asynch'].nil?
      query_params[:'locations'] = opts[:'locations'] if !opts[:'locations'].nil?
      query_params[:'includeNormals'] = opts[:'include_normals'] if !opts[:'include_normals'].nil?
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'unitGroup'] = opts[:'unit_group'] if !opts[:'unit_group'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"HistoricalWeatherApi.visual_crossing_web_services_rest_services_weatherdata_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HistoricalWeatherApi#visual_crossing_web_services_rest_services_weatherdata_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
