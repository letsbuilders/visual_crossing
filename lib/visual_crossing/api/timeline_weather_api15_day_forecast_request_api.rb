=begin
#Visual Crossing Weather API

#Weather Forecast and Historical Weather Data via RESTful API.

The version of the OpenAPI document: 4.6
Contact: info@visualcrossing.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module VisualCrossing
  class TimelineWeatherAPI15DayForecastRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Historical and Forecast Weather API
    # Seamless access to daily and hourly historical and forecast weather data plus weather alerts, events and current conditions.
    # @param location [String] Locaton of interest as an address, partial address or decimal latitude,longtude value
    # @param key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type data format of the output either json or CSV
    # @option opts [String] :unit_group 
    # @option opts [String] :include data to include in the output (required for CSV format - days,hours,alerts,current,events )
    # @option opts [String] :lang Language to use for weather descriptions
    # @return [nil]
    def visual_crossing_web_services_rest_services_timeline_location_get(location, key, opts = {})
      visual_crossing_web_services_rest_services_timeline_location_get_with_http_info(location, key, opts)
    end

    # Historical and Forecast Weather API
    # Seamless access to daily and hourly historical and forecast weather data plus weather alerts, events and current conditions.
    # @param location [String] Locaton of interest as an address, partial address or decimal latitude,longtude value
    # @param key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_type data format of the output either json or CSV
    # @option opts [String] :unit_group 
    # @option opts [String] :include data to include in the output (required for CSV format - days,hours,alerts,current,events )
    # @option opts [String] :lang Language to use for weather descriptions
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def visual_crossing_web_services_rest_services_timeline_location_get_with_http_info(location, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimelineWeatherAPI15DayForecastRequestApi.visual_crossing_web_services_rest_services_timeline_location_get ...'
      end
      # verify the required parameter 'location' is set
      if @api_client.config.client_side_validation && location.nil?
        fail ArgumentError, "Missing the required parameter 'location' when calling TimelineWeatherAPI15DayForecastRequestApi.visual_crossing_web_services_rest_services_timeline_location_get"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling TimelineWeatherAPI15DayForecastRequestApi.visual_crossing_web_services_rest_services_timeline_location_get"
      end
      # resource path
      local_var_path = '/VisualCrossingWebServices/rest/services/timeline/{location}'.sub('{' + 'location' + '}', CGI.escape(location.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key
      query_params[:'contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'unitGroup'] = opts[:'unit_group'] if !opts[:'unit_group'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'lang'] = opts[:'lang'] if !opts[:'lang'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TimelineWeatherAPI15DayForecastRequestApi.visual_crossing_web_services_rest_services_timeline_location_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimelineWeatherAPI15DayForecastRequestApi#visual_crossing_web_services_rest_services_timeline_location_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
